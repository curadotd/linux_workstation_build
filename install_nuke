#!/bin/bash

# Function to detect the Linux distribution
detect_distro() {
    if [ -f /etc/arch-release ]; then
        echo "arch"
    elif [ -f /etc/debian_version ]; then
        echo "debian"
    elif [ -f /etc/rocky-release ]; then
        echo "rocky"
    else
        echo "unknown"
    fi
}

# Function to install dependencies
install_dependencies() {
    local distro=$1
    case $distro in
        arch)
            sudo pacman -Syu --noconfirm
            sudo pacman -S --noconfirm libglvnd libxcb libxkbcommon-x11 xcb-util-wm xcb-util-renderutil xcb-util-keysyms
            ;;
        debian)
            sudo apt update
            sudo apt install -y libglu1-mesa libxcb-xinerama0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0
            ;;
        rocky)
            sudo dnf update -y
            sudo dnf install -y mesa-libGLU libxcb libxkbcommon-x11 xcb-util-wm xcb-util-renderutil xcb-util-keysyms
            ;;
    esac
}

# Main script
echo "Foundry Nuke Installation Script"
echo "================================"

# Detect distribution
distro=$(detect_distro)
if [ "$distro" == "unknown" ]; then
    echo "Unsupported Linux distribution. This script works for Arch, Debian, and Rocky Linux."
    exit 1
fi

# Ask user to download Nuke
echo "Please download the Foundry Nuke installer from https://www.foundry.com/products/nuke/download to your ~/Downloads folder."
read -p "Press Enter when you have downloaded the installer."

# Find the Nuke installer
installer=$(find ~/Downloads -name "Nuke*-linux-*.tgz" -type f -print -quit)

if [ -z "$installer" ]; then
    echo "Nuke installer not found in ~/Downloads. Please download it and try again."
    exit 1
fi

# Extract the installer
echo "Extracting Nuke installer..."
tar -xzf "$installer" -C ~/Downloads

# Find the extracted directory
install_file=$(find ~/Downloads -name "Nuke*-linux-*.run" -type f -print -quit)

if [ -z "$install_file" ]; then
    echo "Extracted Nuke directory not found. Installation failed."
    exit 1
fi

# Install dependencies
echo "Installing dependencies for $distro..."
$install_dependencies $distro

# Run the installer
echo "Installing Nuket..."
read -p "Enter the path where Nuke was installed (e.g., /opt/foundry/nuke): " nuke_path

echo "Running Nuke installer..."
$install_file --accept-foundry-eula --prefix=$nuke_path

# Extract Nuke version from the installer filename
nuke_version=$(echo "$installer" | grep -oP 'Nuke\K[0-9.v]+' | head -1)

# Extract major version (e.g., 15.1 from 15.1v2)
nuke_major_version=$(echo "$nuke_version" | grep -oP '^[0-9]+\.[0-9]+')

# Ask user if they want to install Steam
read -p "Do you to create a launch script (y/n): " launch_answer
if [[ $launch_answer == [Yy]* ]]; then

    read -p "Enter the path where you want the launcher to be installed (e.g., /usr/local/bin): " launch_nuke_path
    read -p "Are you running Nuke Non-Commercial? (y/n): " nuke_non_commercial
    if [[ $nuke_non_commercial == [Yy]* ]]; then
        # Nuke Non-Commercial version
        cat << EOF > $launch_nuke_path/nuke_launcher
#!/bin/bash
if [ "\$1" == "-h" ] || [ "\$1" == "--help" ]; then
    echo "Usage:"
    echo "  ./nuke_launcher       # Launch regular Nuke"
    echo "  ./nuke_launcher x     # Launch NukeX"
    echo "  ./nuke_launcher studio # Launch Nuke Studio"
    exit 0
fi

if [ "\$1" == "x" ]; then
    $nuke_path/Nuke${nuke_version}/Nuke${nuke_major_version} --nukex --nc
elif [ "\$1" == "studio" ]; then
    $nuke_path/Nuke${nuke_version}/Nuke${nuke_major_version} --studio --nc
else
    $nuke_path/Nuke${nuke_version}/Nuke${nuke_major_version} --nc
fi
EOF
    else
        # Commercial version
        cat << EOF > $launch_nuke_path/nuke_launcher
#!/bin/bash
if [ "\$1" == "-h" ] || [ "\$1" == "--help" ]; then
    echo "Usage:"
    echo "  ./nuke_launcher       # Launch regular Nuke"
    echo "  ./nuke_launcher x     # Launch NukeX"
    echo "  ./nuke_launcher studio # Launch Nuke Studio"
    exit 0
fi

if [ "\$1" == "x" ]; then
    $nuke_path/Nuke${nuke_version}/Nuke${nuke_major_version} --nukex
elif [ "\$1" == "studio" ]; then
    $nuke_path/Nuke${nuke_version}/Nuke${nuke_major_version} --studio
else
    $nuke_path/Nuke${nuke_version}/Nuke${nuke_major_version}
fi
EOF
    fi

    chmod +x $launch_nuke_path/nuke_launcher

    echo "Launch script created. Usage:"
    echo "  ./nuke_launcher       # Launch regular Nuke"
    echo "  ./nuke_launcher x     # Launch NukeX"
    echo "  ./nuke_launcher studio # Launch Nuke Studio"
else
    echo "Launch script not created."
fi

# Add to PATH
read -p "Do you want to add the Nuke launcher to your PATH, in the .bashrc? (y/n): " add_to_path
if [ "$add_to_path" == "y" ]; then
    echo 'export PATH=$PATH:$launch_nuke_path' >> ~/.bashrc
    echo "Nuke launcher added to PATH. Please restart your terminal or run 'source ~/.bashrc'."
else
    echo "add $launch_nuke_path/nuke_launcher to your 'PATH' enviroment variables"
fi

# Create application launcher
read -p "Do you want to create application launchers for Nuke, NukeX, and Nuke Studio? (y/n): " create_launcher
if [ "$create_launcher" == "y" ]; then
    mkdir -p ~/.local/share/applications
    
    # Nuke
    cat << EOF > ~/.local/share/applications/nuke.desktop
[Desktop Entry]
Name=Nuke
Exec=$launch_nuke_path/nuke_launcher
Icon=$nuke_path/Nuke${nuke_version}/plugins/icons/NukeApp48.png
Type=Application
Categories=Graphics;
EOF

    # NukeX
    cat << EOF > ~/.local/share/applications/nukex.desktop
[Desktop Entry]
Name=NukeX
Exec=$launch_nuke_path/nuke_launcher x
Icon=$nuke_path/Nuke${nuke_version}/plugins/icons/NukeXApp48.png
Type=Application
Categories=Graphics;
EOF

    # Nuke Studio
    cat << EOF > ~/.local/share/applications/nukestudio.desktop
[Desktop Entry]
Name=Nuke Studio
Exec=$launch_nuke_path/nuke_launcher studio
Icon=$nuke_path/Nuke${nuke_version}/plugins/icons/NukeStudioApp48.png
Type=Application
Categories=Graphics;
EOF

    echo "Application launchers created for Nuke, NukeX, and Nuke Studio. You should now see them in your applications menu."
fi

echo "Foundry Nuke installation completed!"
