#! /bin/bash

# Function to detect the Linux distribution
get_distro() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        echo $ID
    elif [ -f /etc/debian_version ]; then
        echo "debian"
    elif [ -f /etc/arch-release ]; then
        echo "arch"
    elif [ -f /etc/rocky-release ]; then
        echo "rocky"
    else
        echo "unknown"
    fi
}

# Detect the distribution
DISTRO=$(get_distro)

get_git_path() {
    # Check if GIT_PATH is already set
    if [ -z "$GIT_PATH" ]; then
        read -p "Do you want to create a default location for git repositories? (y/n) " create_git_dir
        if [[ $create_git_dir =~ ^[Yy]$ ]]; then
            read -p "Enter the path for git repositories (default: $HOME/git): " git_path
            GIT_PATH=$git_path
            export GIT_PATH
            
            if [ ! -d "$GIT_PATH" ]; then
                mkdir -p "$GIT_PATH"
                echo "Created git directory at $GIT_PATH"
            else
                echo "Git directory already exists at $GIT_PATH"
            fi
        else
            echo "Skipping git directory creation."
        fi
    else
        echo "GIT_PATH is already set to $GIT_PATH"
    fi
}

# Function to install packages based on the distribution
install_packages() {
    case $DISTRO in
        debian)
            sudo apt install "$@"
            ;;
        arch)
            sudo pacman -S --needed "$@"
            ;;
        rocky)
            sudo dnf install "$@"
            ;;
        *)
            echo "Unsupported distribution. Please install the following packages manually: $@"
            read -p "Press Enter to continue or Ctrl+C to exit..."
            ;;
    esac
}

current_dir=$(pwd)

# Ask user if they want to install and setup dwm-curado
read -p "Do you want to install and setup dwm-curado, a fork of dwm-titus? (y/n) " install_dwm_curado

if [[ $install_dwm_curado =~ ^[Yy]$ ]]; then
    echo "Installing and setting up dwm-curado..."
    echo "Installing dependencies"
    case $DISTRO in
        debian|ubuntu)
            install_packages libx11-dev libxft-dev libimlib2-dev libxinerama-dev libxcb-res0-dev kitty feh \
            mate-polkit flameshot dunst libconfig-dev libdbus-1-dev libegl-dev libev-dev libgl-dev libepoxy-dev \
            libpcre2-dev libpixman-1-dev libx11-xcb-dev libxcb1-dev libxcb-composite0-dev libxcb-damage0-dev \
            libxcb-dpms0-dev libxcb-glx0-dev libxcb-image0-dev libxcb-present-dev libxcb-randr0-dev libxcb-render0-dev \
            libxcb-render-util0-dev libxcb-shape0-dev libxcb-util-dev libxcb-xfixes0-dev libxext-dev meson ninja-build \
            uthash-dev cmake libxft-dev libimlib2-dev libxinerama-dev libxcb-res0-dev alsa-utils
            ;;
        arch)
            install_packages libx11 libxft libxinerama libxcb kitty feh mate-polkit flameshot dunst base-devel \
            libconfig dbus libev libx11 libxext libgl libegl libepoxy meson pcre2 pixman uthash xcb-util-image \
            xcb-util-renderutil xorgproto cmake libxft imlib2 libxinerama xcb-util xorg-xev xorg-xbacklight \
            alsa-utils feh thunar-media-tags-plugin thunar-archive-plugin thunar-volman
            ;;
        rocky)
            install_packages libX11-devel libXft-devel imlib2-devel libXinerama-devel libxcb-devel kitty feh polkit \
            flameshot dunst dbus-devel gcc git libconfig-devel libdrm-devel libev-devel libX11-devel libX11-xcb \
            libXext-devel libxcb-devel libGL-devel libEGL-devel libepoxy-devel meson ninja-build pcre2-devel \
            pixman-devel uthash-devel xcb-util-image-devel xcb-util-renderutil-devel xorg-x11-proto-devel \
            xcb-util-devel cmake libxft-devel libimlib2-devel libxinerama-devel libxcb-res0-devel alsa-utils
            ;;
    esac
    # Add installation and setup commands for dwm-curado here
    get_git_path
    git clone https://github.com/curadotd/dwm-curado.git $GIT_PATH/dwm-curado
    cd $GIT_PATH/dwm-curado
    sudo make clean install
    cd $current_dir
    # Add any additional configuration steps
else
    echo "Skipping dwm-curado installation and setup."
    exit 0
fi

# Ask user if they want to install and setup slstatus-curado
read -p "Do you want to install and setup slstatus-curado, a fork of slstatus? (y/n) " install_slstatus_curado

if [[ $install_slstatus_curado =~ ^[Yy]$ ]]; then
    echo "Installing and setting up slstatus-curado..."
    echo "Installing dependencies"
    case $DISTRO in
        debian|ubuntu)
            install_packages libx11-dev libxft-dev libxinerama-dev alsa-oss
            sudo /usr/sbin/modprobe snd-pcm-oss
            echo "Adding snd-pcm-oss to /etc/modules-load.d/modules.conf"
            echo "snd-pcm-oss" | sudo tee -a /etc/modules-load.d/modules.conf > /dev/null
            ;;
        arch)
            install_packages libx11 libxft libxinerama alsa-oss
            sudo modprobe snd-pcm-oss
            echo "Adding snd-pcm-oss to /etc/modules-load.d/snd-pcm-oss.conf"
            echo "snd-pcm-oss" | sudo tee /etc/modules-load.d/snd-pcm-oss.conf > /dev/null
            ;;
        rocky)
            install_packages libX11-devel libXft-devel libXinerama-devel alsa-oss
            sudo modprobe snd-pcm-oss
            echo "Adding snd-pcm-oss to /etc/modules-load.d/snd-pcm-oss.conf"
            echo "snd-pcm-oss" | sudo tee /etc/modules-load.d/snd-pcm-oss.conf > /dev/null
            ;;
    esac
    # Add installation and setup commands for slstatus_curado here
    # For example:
    get_git_path
    git clone https://github.com/curadotd/slstatus-curado.git $GIT_PATH/slstatus-curado
    cd $GIT_PATH/slstatus-curado
    sudo make clean install
    cd $current_dir
    # Add any additional configuration steps
else
    echo "Skipping slstatus-curado installation and setup."
fi

# Ask user if they want to use picom files
read -p "Do you want to install picom? (y/n) " install_picom

if [[ $install_picom =~ ^[Yy]$ ]]; then
    echo "Installing picom..."

    # Check if picom exists
    if ! command -v picom &> /dev/null; then
        if [ ! -d $GIT_PATH/picom ]; then
            get_git_path
            if ! git clone https://github.com/FT-Labs/picom.git $GIT_PATH/picom; then
                echo "Failed to clone the repository"
                return 1
            fi
        else
            echo "Repository already exists, skipping clone"
        fi
        cd $GIT_PATH/picom || { echo "Failed to change directory to picom"; return 1; }
        
        case $DISTRO in
            debian|ubuntu)
                install_packages libev-dev libxcb-present-dev
                ;;
            arch)
                install_packages libev libxcb xcb-util-renderutil xcb-util-image
                ;;
            rocky)
                install_packages libev-devel libxcb-devel xcb-util-renderutil-devel xcb-util-image-devel
                ;;
            *)
                echo "This system is not supported. Please install the required dependencies manually."
                echo "Required packages: libev, libxcb, xcb-util-renderutil, xcb-util-image"
                read -p "Press Enter to continue or Ctrl+C to exit..."
                ;;
        esac
        
        # Build the project
        if ! meson setup --buildtype=release build; then
            echo "Meson setup failed"
            return 1
        fi
        if ! ninja -C build; then
            echo "Ninja build failed"
            return 1
        fi
        # Install the built binary
        if ! sudo ninja -C build install; then
            echo "Failed to install the built binary"
            return 1
        fi
        echo "Picom animations installed successfully"
        cd $current_dir
    else
        echo "picom is already installed"
        cd $current_dir
    fi
else
    echo "Skipping picom install."
    cd $current_dir
fi

# Ask user if they want to install LightDM greeter
read -p "Do you want to install and enable LightDM greeter? (y/n) " install_lightdm

if [[ $install_lightdm =~ ^[Yy]$ ]]; then
    echo "Installing LightDM and LightDM GTK greeter..."
    case $DISTRO in
        debian|ubuntu)
            install_packages lightdm lightdm-gtk-greeter
            sudo dpkg-reconfigure lightdm
            ;;
        arch)
            install_packages lightdm lightdm-gtk-greeter
            sudo systemctl enable lightdm
            ;;
        rocky)
            install_packages lightdm lightdm-gtk
            sudo systemctl enable lightdm
            ;;
    esac
    echo "LightDM has been installed and enabled."
else
    echo "Skipping LightDM installation."
fi

echo "DWM setup complete."
